/**
 * A basic math library.
 */
class Math {
	static int twoToThe;	// Array to hold power of 2's (0-15)
	static int lastRemainder;
	
    /** Initializes the library. */
    function void init() {
		var int i;
		let lastRemainder = 0;
		let i = 1;
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		while (i < 16) {
			let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
			let i = i + 1;
		}
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
			return -x;
		}
		return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
		var int total, i;
		let i = 0;
		let total = 0;
		
		while (i < 16) {
			if (~(twoToThe[i] & y = 0)) {
				let total = total + x;
			}
			let x = x + x;
			let i = i + 1;
		}
		return total;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
		var int quotient, remainder;
		var boolean xNeg, yNeg;
		var int i;
		
		if (y = 0) {
			do Sys.error(3); // Division by zero error
		}
		if (x < 0) {
			let x = -x;
			let xNeg = true;
		}
		if (y < 0) {
			let y = -y;
			let yNeg = true;
		}
		
		// Basic reverse long division
		let quotient = 0;
		let remainder = 0;
		let i = 14;
		while (~(i < 0)) {
			let remainder = remainder + remainder + Math.bit(x, i);
			if (~(remainder < y)) {
				let remainder = remainder - y;
				let quotient = quotient | twoToThe[i];
			}
			let i = i - 1;
		}
		
		let lastRemainder = remainder;
		// Determine results sign based on x and y's signs
		if (xNeg = yNeg) {
			return quotient;
		}
		
		return -quotient;
    }
	
	function int remainder() {
		return lastRemainder;
	}
	
	// Returns if x's nth bit is 1
	function int bit(int x, int n) {
		if ((x & twoToThe[n]) = 0) {
			return 0;
		}
		return 1;
	}
	
	// Returns the integer value of a word with nth bit on
	function int nBit(int n) {
		if ((n < 0) | (n > 15)) {
			return 0;
		}
		return twoToThe[n];
	}
	
	function int sign(int x) {
		if (x < 0) {
			return -1;
		}
		return 1;
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, i, greater;
		
		if (x < 0) {
			do Sys.error(4); // Cannot compute square root of a negative number
		}
		
		let y = 0;
		let i = 7; // 16 bits / 2 - 1
		
		while (~(i < 0)) {
			let greater = (y + twoToThe[i])*(y + twoToThe[i]);
			if (~(greater > x) & (greater > 0)) {
				let y = y + twoToThe[i];
			}
			let i = i - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a < b) {
			return b;
		}
		return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a > b) {
			return b;
		}
		return a;
    }
}
