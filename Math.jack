/**
 * A basic math library.
 */
class Math {
	static int twoToThe;	// Array to hold power of 2's (0-15)
	static int lastRemainder; // The remainder of the last division calculation
	
    /** Initializes the library. */
    function void init() {
		var int i;
		let i = 1;
		let lastRemainder = 0;
		let twoToThe = Array.new(17);
		
		let twoToThe[0] = 1;
		while (i < 16) {
			let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1]; // Leftshift 
			let i = i + 1;
		}
		let twoToThe[16] = 0;
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
			return -x;
		}
		return x;
    }

    /** Returns the product of x and y. */
	function int multiply(int x, int y) {
		var int total, temp, twosPowers, i, negative, yMinusOF;
		let negative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
		
		let x = Math.abs(x);
		let y = Math.abs(y);
		
		if (x < y) {
			let temp = x;
			let x = y;
			let y = temp;
		}
		
		// Variables for overflow protection
		let yMinusOF = y - 1;
		let twosPowers = -1;
		// Basic long multiplication algorithm
		while (twosPowers < yMinusOF) { // -1 for overflow protection
			if (~((twoToThe[i] & y) = 0)) {
				let total = total + x;
				let twosPowers = twosPowers + twoToThe[i];
			}
			let x = x + x;
			let i = i + 1;
		}
		if (negative) {
			return -total;
		}
		return total;
	}

    /** Returns the integer part of x/y and sets lastRemainder to hold 
	  * divisions remainder. */
    function int divide(int x, int y) {
		var int quotient, negative, i;
		
		let negative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
		let x = Math.abs(x);
		let y = Math.abs(y);
		
		if (y = 0) {
			do Sys.error(3); // Division by zero error
		}
		if (x < y) {
			let lastRemainder = x;
			return 0;
		}
		
		// Basic reversed long division
		let lastRemainder = 0; // save the remainder to static variable
		let i = 14; // No need to check the most significant bit
		while (~(i < 0)) {
			let lastRemainder = lastRemainder + lastRemainder | Math.bit(x, i);
			if (~(lastRemainder < y)) {
				let lastRemainder = lastRemainder - y;
				let quotient = quotient | twoToThe[i];
			}
			let i = i - 1;
		}
		
		// Determine results sign based on x and y's signs
		if (negative) {
			return -quotient;
		}
		
		return quotient;
    }
	
	/** Returns the remainder of the last division calculation */
	function int remainder() {
		return lastRemainder;
	}
	
	/** Returns 1 if x's nth bit is 1 */
	function int bit(int x, int n) {
		if ((x & twoToThe[n]) = 0) {
			return 0;
		}
		return 1;
	}
	
	/** Returns the integer value of a word with nth bit on */
	function int twoToThe(int n) {
		return twoToThe[n];
	}
	
	/** Returns the sign of the value */
	function int sign(int x) {
		if (x < 0) {
			return -1;
		}
		return 1;
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, i, greater;
		
		if (x < 0) {
			do Sys.error(4); // Cannot compute square root of a negative number
		}
		
		let i = 7; // 16 bits / 2 - 1
		
		while (~(i < 0)) {
			let greater = (y + twoToThe[i])*(y + twoToThe[i]);
			if (~(greater > x) & (greater > 0)) {
				let y = y + twoToThe[i];
			}
			let i = i - 1;
		}
		return y;
    }

    /** Returns the greater number (or a if equal). */
    function int max(int a, int b) {
		if (a < b) {
			return b;
		}
		return a;
    }

    /** Returns the smaller number (or a if equal). */
    function int min(int a, int b) {
		if (a > b) {
			return b;
		}
		return a;
    }
}
