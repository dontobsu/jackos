/**
 * A basic math library.
 */
class Math {
	static int twoToThe;	// Array to hold power of 2's (0-15)
	
    /** Initializes the library. */
    function void init() {
		var int i;
		let i = 1;
		let twoToThe = Array.new(16);
		
		let twoToThe[0] = 1;
		while (i < 16) { // calculate the values of 2 to the power of i
			let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1]; // Leftshift 
			let i = i + 1;
		}
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
			return -x;
		}
		return x;
    }

    /** Returns the product of x and y. */
	function int multiply(int x, int y) {
		var int total, temp, twosPowers, i, negative, yMinusOF;
		let negative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
		
		let x = Math.abs(x);
		let y = Math.abs(y);
		
		if (x < y) {
			let temp = x;
			let x = y;
			let y = temp;
		}
		// Variables for overflow protection
		let yMinusOF = y - 1;
		let twosPowers = -1;
		// Basic long multiplication algorithm
		while (twosPowers < yMinusOF) { // -1 for overflow protection
			if (~((twoToThe[i] & y) = 0)) {
				let total = total + x;
				let twosPowers = twosPowers + twoToThe[i];
			}
			let x = x + x;
			let i = i + 1;
		}
		if (negative) {
			return -total;
		}
		return total;
	}

    /** Returns the integer part of x/y */
    function int divide(int x, int y) {
		var int quotient, negative, i, remainder;
		
		let negative = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));
		let x = Math.abs(x);
		let y = Math.abs(y);
		
		if (y = 0) {
			do Sys.error(3); // Division by zero error
		}
		if (x < y) {
			return 0;
		}
		
		// Basic reversed long division
		let i = 14; // No need to check the most significant bit
		while (~(i < 0)) {
			let remainder = remainder + remainder | Math.bit(x, i);
			if (~(remainder < y)) {
				let remainder = remainder - y;
				let quotient = quotient | twoToThe[i];
			}
			let i = i - 1;
		}
		
		// Determine results sign based on x and y's signs
		if (negative) {
			return -quotient;
		}
		
		return quotient;
    }
	
	/** Returns 1 if x's nth bit is 1, otherwise 0 */
	function int bit(int x, int n) {
		if ((x & twoToThe[n]) = 0) {
			return 0;
		}
		return 1;
	}
	
	/** Returns the value of 2 to the power of n */
	function int twoToThe(int n) {
		return twoToThe[n];
	}
	
	/** Returns the sign of the value */
	function int sign(int x) {
		if (x < 0) {
			return -1;
		}
		return 1;
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, i, seeker;
		
		if (x < 0) {
			do Sys.error(4); // Cannot compute square root of a negative number
		}
		
		let i = 7; // 16 bits / 2 - 1 (middlepoint of a 16 bit signed int)
		
		// Search for a value such that y^2 = x using binary search
		while (~(i < 0)) {
			let seeker = (y + twoToThe[i])*(y + twoToThe[i]);
			if (~(seeker > x) & (seeker > 0)) { // seeker < 0 implicates overflow
				let y = y + twoToThe[i];
			}
			let i = i - 1;
		}
		return y;
    }

    /** Returns the greater number (or a if equal). */
    function int max(int a, int b) {
		if (a < b) {
			return b;
		}
		return a;
    }

    /** Returns the smaller number (or a if equal). */
    function int min(int a, int b) {
		if (a > b) {
			return b;
		}
		return a;
    }
}
