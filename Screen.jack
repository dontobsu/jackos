/**
 * Graphic screen library.
 */
class Screen {
	static int width, height, sections;
	static boolean color;
	static int mapAddr;
	
    /** Initializes the Screen. */
    function void init() {
		let mapAddr = 16384;
		let width = 512;
		let height = 256;
		let sections = height * (width/16);
		let color = 1;

		return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
		var int i, mask;
		if (color) {
			let mask = 0;
		} else {
			let mask = -1;
		}
		
		let i = 0;
		while (i < sections) {
			do Memory.poke(mapAddr + i, mask);
			let i = i + 1;
		}
		return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }
	
	function boolean validCoordinates(int x, int y) {
		if (((x < 0) | ~(x < width)) | ((y < 0) | ~(y < height))) {
			return false;
		}
		return true;
	}

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
		var int mask, section;
		if (~Screen.validCoordinates(x, y)) {
			do Sys.exit(7); // Illegal pixel coordinates
		}
		
		let section = mapAddr+(y*32)+(x/16);
		let mask = Math.nBit(x & 15); // modulo(x, 15)
		if (color) {
			do Memory.poke(section, Memory.peek(section) | mask);
		} else {
			let mask = ~mask;
			do Memory.poke(section, Memory.peek(section) & mask);
		}
		return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
		return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
		return;
    }
	
	function int mod16(int x) {
		return (x & 8) + (x & 4) + (x & 2) + (x & 1);
	}
}
