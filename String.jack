/**
 * Represents a String object. Implements the String type.
 */
class String {
	field int curLength;
	field int maxLength;
	field Array str; // Array to hold string's characters
	
    /** Constructs a new empty String with a maximum length of maxLen. */
    constructor String new(int maxLen) {
		if (maxLen < 0) {
			do Sys.error(14); // Maximum length must be non-negative
		}
		let curLength = 0;
		let maxLength = maxLen;
		if (maxLen > 0) { // Zero-length strings are allowed, but dont allocate
			let str = Array.new(maxLen);
		}
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		if (maxLength > 0) { // Nothing to de-allocate
			do str.dispose();
		}
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return curLength;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
		if ((j < 0) | (j > (curLength-1))) {
			do Sys.error(15); // String index out of bounds
		}
		return str[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
		if ((j < 0) | ~(j < curLength)) {
			do Sys.error(16); // String index out of bounds
		}
		let str[j] = c;
		return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		if (~(curLength < maxLength)) {
			do Sys.error(17); // String is full
		} else {
			let str[curLength] = c;
			let curLength = curLength + 1;
		}
		return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		if (~(curLength > 0)) {
			do Sys.error(18); // String is empty
		}
		let curLength = curLength - 1;
		let str[curLength] = 0;
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var int value, i, validTill;
		var boolean neg;
		
		while (i < curLength) {
			if ((str[i] > 47) & (str[i] < 58)) { // 0-9
				let value = value * 10;
				let value = value + (str[i] - 48);
			} else {
				if ((str[i] = 45) & (i = 0)) { // '-' character
					let neg = 1;
				} else {
					let i = curLength;
				}
			}
			let i = i + 1;
		}
		if (neg) {
			return -value;
		}
		return value;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		var int mod, nPer10;
		
		if (Math.abs(number) < 10) { // The first digit of the value
			let curLength = 0;
			if (number < 0) {
				if (maxLength < 2) {
					do Sys.error(19); // Insufficient string capacity
				}
				do appendChar(45); // Append '-' sign
			} else {
				if (maxLength < 1) {
					do Sys.error(19); // Insufficient string capacity
				}
			}
			do appendChar(Math.abs(number) + 48);
			return;
		}
		
		let nPer10 = number/10; // Get rid of the last digit
		do setInt(nPer10);
		
		if ((maxLength - curLength) < 1) {
			do Sys.error(19); // Insufficient string capacity
		}
		
		let mod = number - (10*nPer10); // last digit of the given number
		do appendChar(Math.abs(mod) + 48);
		
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
