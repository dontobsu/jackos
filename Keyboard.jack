/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
	static int memoryMap;
	static int readLineMaxLength;
    /** Initializes the keyboard. */
    function void init() {
		let memoryMap = 24576;
		let readLineMaxLength = 100;
		return;
    } 

    /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, as well as the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
		return Memory.peek(memoryMap);
    }

    /**								
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
    function char readChar() {
		var char chr;
		let chr = 0;//Keyboard.keyPressed();
		
		do Output.printChar(0); // Print cursor
		do Output.backSpace();
		while (chr = 0) { // Wait for a keypress
			let chr = Keyboard.keyPressed();
		}
		while (~(Keyboard.keyPressed() = 0)) {} // Wait for a key release
		
		do Output.printChar(32); // space
		do Output.backSpace(); // In case it jumped a row 
		if (chr = 128) {
			do Output.println();
			return chr;
		} 
		if (chr = 129) {
			do Output.backSpace();
			return chr;
		}
		do Output.printChar(chr);
		return chr;
    }

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its value.
     */
    function String readLine(String message) {
		var String input;
		var char chr;
		let input = String.new(readLineMaxLength);
		let chr = 0;
		
		do Output.printString(message);
		while (~(chr = String.newLine())) {
			let chr = Keyboard.readChar();
			if (chr = String.backSpace()) {
				if (input.length() > 0) {
					do input.eraseLastChar();
				} else {
					do Output.cursorForward();
				}
			} else {
				if (~(chr = String.newLine())) {
					do input.appendChar(chr);
				}
			}
		}
		return input;
    }   

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its
     * integer value (until the first non numeric character).
     */
    function int readInt(String message) {
		var String rawInput;
		var int value;
		
		let rawInput = Keyboard.readLine(message);
		let value = rawInput.intValue();
		do rawInput.dispose();
		return value;
    }
}
