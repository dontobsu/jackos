/**
 * A library of basic system services.
 */
 
/**
 * Jack OS Error Codes
 * 
 * Code Method/Function      Description
 * ---- ---------------      -----------------------------------------------
 * 1   Sys.wait              Duration must be positive
 * 2   Array.new             Array size must be positive
 * 3   Math.divide           Division by zero
 * 4   Math.sqrt             Cannot compute square root of a negative number
 * 5   Memory.alloc          Allocated memory size must be positive
 * 6   Memory.alloc          Heap overflow
 * 7   Screen.drawPixel      Illegal pixel coordinates
 * 8   Screen.drawLine       Illegal line coordinates
 * 9   Screen.drawRectangle  Illegal rectangle coordinates
 * 12  Screen.drawCircle     Illegal center coordinates
 * 13  Screen.drawCircle     Illegal radius
 * 14  String.new            Maximum length must be non-negative
 * 15  String.charAt         String index out of bounds
 * 16  String.setCharAt      String index out of bounds
 * 17  String.appendChar     String is full
 * 18  String.eraseLastChar  String is empty
 * 19  String.setInt         Insufficient string capacity
 * 20  Output.moveCursor     Illegal cursor location
 *
 * 21  Math.twoToThe         Illegal exponent
 */
 
class Sys {

    /** Performs all the initializations required by the OS. */
    function void init() {
		do Memory.init(); // Some modules depend on Memory
		do Math.init();
		do Screen.init();
		do Output.init();
		do Keyboard.init();
		do Main.main();
		do Sys.halt();
		return;
    }

    /** Halts execution. */
    function void halt() {
		while (true) {} // Infinite loop
		return;
    }

    /** Waits approximately duration milliseconds and then returns. Overflows at duration > 32676
	    Tested with emulator's speed set to fast */
    function void wait(int duration) {
		var int i, j;
		if (duration < 0) {
			do Sys.error(1); // Duration must be positive
		}
		
		while (i < duration) {
			let j = 0;
			while (j < 500) {	// Approximately 1 ms
				let j = j + 1;
			}
			let i = i + 1;
		}
		return;
    }

    /** Prints the given error code in the form "ERR<errorCode>", and halts. */
    function void error(int errorCode) {
		do Output.printString("ERR");
		do Output.printInt(errorCode);
		do Sys.halt();
		return;
    }
}
